<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc https://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans https://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context https://www.springframework.org/schema/context/spring-context.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.0.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing infrastructure -->
	
	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/views directory -->
	<beans:bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>
	
	<context:component-scan base-package="com.gura.spring05" />
	
	<!-- 
		아래의 MyBatis 관련 설정은 Servers/context.xml 문서에
		
		<Resource maxWaitMillis="-1" maxIdle="10" maxTotal="20" 
		password="tiger" username="scott" 
    	url="jdbc:oracle:thin:@127.0.0.1:1521:xe" 
    	driverClassName="oracle.jdbc.OracleDriver" 
    	type="javax.sql.DataSource" auth="Container" 
    	name="jdbc/myoracle"/>
    	
    	위와 같은 DB 접속 정보가 있어야지 동작하는 것과 같다.
	 -->

	<beans:bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<beans:property name="jndiName" value="java:comp/env/jdbc/myoracle"/>
	</beans:bean>
	<!-- 
		위의 설정을 JAVA code로 환산하면
		
		JndiObjectFactoryBean dataSource=new JndiObjectFactoryBean();
		dataSource.setJndiName("java:comp/env/jdbc/myoracle");
		
	-->
	
	<beans:bean id="sessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<beans:property name="dataSource" ref="dataSource"/>
		<beans:property name="configLocation" value="classpath:com/gura/spring05/mybatis/Configuration.xml"/>
	</beans:bean>
	<!-- 
		위의 설정을 JAVA code로 환산하면
		
		JndiObjectFactoryBean dataSource=new JndiObjectFactoryBean();
		dataSource.setJndiName("java:comp/env/jdbc/myoracle");
		
		SqlSessionFactoryBean sessionFactory=new SqlSessionFactoryBean();
		sessionFactory.setDataSource(dataSource 의 참조 값을 전달);
		sessionFactory.setConfigLocation("classpath:com/gura/spring05/mybatis/Configuration.xml")
	-->
	
	<beans:bean class="org.mybatis.spring.SqlSessionTemplate">
		<beans:constructor-arg name="sqlSessionFactory" ref="sessionFactory"/>
	</beans:bean>
	<!-- 
		위의 설정을 JAVA code로 환산하면
		
		new SqlSessionTemplate(sessionFactory);
		**<beans:constructor-arg name="sqlSessionFactory" ref="sessionFactory"/>
		**생성자의 인자로 sessionFactory 참조값을 전달한다.
		
		new SqlSessionTemplate(sessionFactory);객체는 DB를 연동하기 위한 핵심 객체이다.
		**SqlSessionTemplate는 SqlSession 인터페이스를 implements되었다.
	-->
	
	<!-- 어노테이션 기반으로 폼전송 처리를 위한 bean 설정 -->
	<aop:aspectj-autoproxy />
	
	<!-- 파일업로들 폼 전송처리를 위한 bean 설정 -->
	<beans:bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver">
		<beans:property name="maxUploadSize" value="1024000"/>
	</beans:bean>
</beans:beans>
